---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: kafka
  title: "Kafka Promise"
  description: "Create Kafka on-demand"
  links:
  - url: https://github.com/syntasso/kratix-marketplace
    title: Support
    icon: help
  annotations:
    backstage.io/kubernetes-id: kafka
spec:
  type: promise
  lifecycle: production
  owner: kratix-platform
  dependsOn:
    - component:default/kratix
  providesApis:
    - kafka-promise-api
---
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: kafka-promise-template
  title: Kafka
  description: Kafka as a Service
  tags:
    - syntasso
    - kratix
spec:
  type: service
  lifecycle: experimental
  owner: kratix-platform
  parameters:
    - title: Kafka as a Service
      required:
        - name
        - size
      properties:
        name:
          title: Name
          type: string
          description: Name for Kafka instance
          ui:autofocus: true
        size:
          title: Size
          type: string
          description: Size, small or large
  steps:
  - id: k-apply
    name: Create a Kafka
    action: kubernetes:apply
    input:
      namespaced: true
      manifest: |
        apiVersion: marketplace.kratix.io/v1alpha1
        kind: kafka
        metadata:
          name: ${{ parameters.name }}
          namespace: default
        spec:
          size: ${{ parameters.size }}
---
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: jenkins-promise-template
  title: Jenkins
  description: Jenkins as a Service
  tags:
    - syntasso
    - kratix
    - jenkins
spec:
  type: service
  lifecycle: experimental
  owner: hoangndst
  parameters:
    - title: Jenkins as a Service
      required:
        - name
        - env
      properties:
        name:
          title: Name
          type: string
          description: Name for Jenkins instance
          ui:autofocus: true
        env:
          title: Environment
          type: string
          description: Environment for Jenkins instance
          enum:
            - dev
            - prod
          ui:widget: select
          ui:options:
            placeholder: Select environment
  steps:
  - id: k-apply
    name: Create a Jenkins
    action: kubernetes:apply
    input:
      namespaced: true
      manifest: |
        apiVersion: marketplace.kratix.io/v1alpha1
        kind: jenkins
        metadata:
          name: ${{ parameters.name }}
          namespace: default
        spec:
          env: dev
---
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: postgres-promise-template
  title: PostgreSQL
  description: PostgreSQL as a Service
  tags:
    - syntasso
    - kratix
    - postgres
spec:
  type: service
  lifecycle: experimental
  owner: hoangndst
  parameters:
    - title: PostgreSQL as a Service
      required:
        - name
        - env
        - dbName
        - teamId
      properties:
        name:
          title: Name
          type: string
          description: Name for PostgreSQL instance
          ui:autofocus: true
        dbName:
          title: Database Name
          type: string
          description: Database name. A database will be created with this name. The owner of the database will be the teamId.
        teamId:
          title: Team ID
          type: string
          description: Team ID. A superuser role will be created with this name.
        env:
          title: Environment
          type: string
          description: Environment for PostgreSQL instance
          enum:
            - dev
            - staging
            - prod
          ui:widget: select
          ui:options:
            placeholder: Select environment
  steps:
  - id: k-apply
    name: Create a PostgreSQL
    action: kubernetes:apply
    input:
      namespaced: true
      manifest: |
        apiVersion: marketplace.kratix.io/v1alpha1
        kind: postgresql
        metadata:
          name: ${{ parameters.name }}
          namespace: default
        spec:
          env: ${{ parameters.env }}
          teamId: ${{ parameters.teamId }}
          dbName: ${{ parameters.dbName }}
